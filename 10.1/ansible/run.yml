---
- hosts: mysql
  tasks:
    - name: Determine if MySQL has be initialized
      stat:
        path: "/var/lib/mysql/mysql"
      register: _mysql_data_dir
    - name: Run MySQL initialization script
      shell: >
        mysql_install_db --user=mysql --datadir=/var/lib/mysql
      when:
        - _mysql_data_dir.stat.exists == false

    - name: Ensure the MySQL conf directory exists.
      file:
        path: "/etc/my.cnf.d"
        state: directory
        owner: "mysql"
        group: "mysql"
        mode: "u=rwx,g=rwx,o="

    - name: Configure MySQL globally.
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: "mysql"
        group: "mysql"
        mode: "u=r,g=r,o="
      loop:
        - src: "templates/my.cnf.d/flight-deck.cnf.j2"
          dest: "/etc/my.cnf.d/flight-deck.cnf"
        - src: "templates/my.cnf.d/mariadb-server.cnf.j2"
          dest: "/etc/my.cnf.d/mariadb-server.cnf"

    - name: Start MySQL in the background
      shell: >
        /usr/local/bin/mysql-background-start.sh
      notify:
        - stop background mysql

    # The .my.cnf file only exists after database initialization, so we need
    # to create a variable only if it exists. That way, we can use default(omit)
    # everywhere to fallback to passwordless use on first startup.
    - name: Check if .my.cnf exists
      stat:
        path: "/var/lib/mysql/.my.cnf"
      register: _mycnf
    - name: Set a flag if the file exists
      set_fact:
        _conf_file_path: "/var/lib/mysql/.my.cnf"
      when:
        - _mycnf.stat.exists

    - name: Drop the test database
      mysql_db:
        name: "test"
        state: absent
        login_user: "root"
        login_unix_socket: "/var/run/mysqld/mysqld.sock"
        config_file: "{{ _conf_file_path | default(omit) }}"
      when:
        - _mysql_data_dir.stat.exists == false

    - name: Ensure MySQL users are present.
      mysql_user:
        name: "{{ item.name }}"
        host: "{{ item.host | default('localhost') }}"
        password: "\
          {% if item.passwordFile is defined %}\
          {{ lookup('file', item.passwordFile, errors='strict') }}\
          {% else %}\
          {{ item.password | default(omit) }}\
          {% endif %}"
        priv: "{{ item.priv | default('*.*:USAGE') }}"
        state: "{{ item.state | default('present') }}"
        append_privs: "{{ item.append_privs | default('no') }}"
        encrypted: "{{ item.encrypted | default('no') }}"
        login_user: "root"
        login_unix_socket: "/var/run/mysqld/mysqld.sock"
        config_file: "{{ _conf_file_path | default(omit) }}"
      with_items: "{{ mysql_users }}"
      no_log: "{{ flightdeck_debug | default(false) | ternary(false, true) }}"

    - name: Generate a list of additional databases to create.
      set_fact:
        db:
          name: "{{ item }}"
          encoding: "latin1"
          collation: "latin1_general_ci"
      loop: "{{ lookup('env', 'ADDITIONAL_DATABASES').split() | list | unique }}"
      register: _additional_dbs_raw

    - name: Normalize the additional dbs into a list.
      set_fact:
        _additional_dbs: "{{ _additional_dbs_raw.results | map(attribute='ansible_facts.db') | list | default([]) }}"

    - name: Ensure MySQL databases are present.
      mysql_db:
        name: "{{ item.name }}"
        collation: "{{ item.collation | default('utf8_general_ci') }}"
        encoding: "{{ item.encoding | default('utf8') }}"
        state: "{{ item.state | default('present') }}"
        login_user: "root"
        login_unix_socket: "/var/run/mysqld/mysqld.sock"
        config_file: "{{ _conf_file_path | default(omit) }}"
      with_items: "{{ mysql_databases + _additional_dbs }}"

    - name: Update the root password.
      mysql_user:
        name: "root"
        host: "localhost"
        password: "\
          {% if mysql_root_password_file is defined %}\
          {{ lookup('file', mysql_root_password_file, errors='strict') }}\
          {% else %}\
          {{ mysql_root_password | default(_random_pw, true) }}\
          {% endif %}"
        login_user: "root"
        login_unix_socket: "/var/run/mysqld/mysqld.sock"
        config_file: "{{ _conf_file_path | default(omit) }}"
      vars:
        _random_pw: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters') }}"
      when:
        - mysql_root_password != '' or mysql_use_random_root_password == true
      no_log: "{{ flightdeck_debug | default(false) | ternary(false, true) }}"

    # Create the .my.cnf file in the volume, *and* the home directory.
    # That way, users exec-ing in don't need to specify a login.
    - name: Create .my.cnf
      copy:
        dest: "{{ item }}"
        content: |
          [client]
          user=root
          password={{ mysql_root_password }}
        owner: "mysql"
        group: "mysql"
        mode: "u=rw,g=rw,o="
      when:
        - mysql_root_password != ''
      loop:
        - "/home/mysql/.my.cnf"
        - "/var/lib/mysql/.my.cnf"

    # This task will only use the config file we just created.
    - name: Configure remote root account.
      mysql_user:
        name: "root"
        host: "%"
        password: "\
          {% if mysql_root_password_file is defined %}\
          {{ lookup('file', mysql_root_password_file, errors='strict') }}\
          {% else %}\
          {{ mysql_root_password }}\
          {% endif %}"
        state: "{{ mysql_allow_remote_root | ternary('present', 'absent') }}"
        priv: "*.*:ALL"
        login_unix_socket: "/var/run/mysqld/mysqld.sock"
        config_file: "{{ _conf_file_path | default(omit) }}"
      when:
        - (mysql_root_password != '') or (mysql_root_password_file is defined)
      no_log: "{{ flightdeck_debug | default(false) | ternary(false, true) }}"

  handlers:
    - name: stop background mysql
      shell: >
        /usr/local/bin/mysql-background-stop.sh
